# export

1. 声明后导出

   ```javascript
   const a = 42
   export { a }
   ```

   ```javascript
   import { a } from './module.js'
   ```

2. 声明并导出

   ```javascript
   export const a = 42;
   ```

   ```javascript
   import { a } from './module.js'
   ```

3. 默认导出

   ```javascript
   const a = 42
   export default a
   ```

   ```javascript
   import a from './module'
   ```

4. 混合使用

   ```javascript
   const a = 42;
   const b = 'Hello';
   function greet() {
     console.log('Hi');
   }
   
   export { a, b, greet };
   export default a;
   ```

   ```javascript
   import value, { b, greet } from './module';
   ```



# import

```javascript
import * as module from './module.js';

import { module } from './module.js';

import module from './module.js';

import { module as module1 } from './module.js';
```



import * as module from './module.js';

如果 ./module.js 里面有`export default` ，则使用 module.default.

```javascript
module.default.a = 10;
```



import { module } from './module.js';

如果 ./module.js 里面有`export default` ，则使用 `import { default as module } from './module.js';`



import { module as module1 } from './module.js';

类似于 import { module } from './module.js'; `export default`的情况



# 既有 default 也有一般暴露

这里的 {a} 不是 解构赋值，是变量a，即({})

```javascript
const a = {}
const module = {}
module.a = a
module.a = 123

export default module
export a
```

```javascript
import module, {a} from './module.js';
```

